services:
  db:
    image: postgres:15-alpine
    container_name: logicortex_db
    environment:
      - POSTGRES_USER=logicortex
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=logicortex_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U logicortex -d logicortex_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: logicortex_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: logicortex_backend
    env_file:
      - .env
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
    ports:
      - "8888:8000"
    environment:
      - DATABASE_URL=postgresql://logicortex:secret@db/logicortex_dev
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: logicortex_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - backend

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: logicortex_worker
    command: celery -A app.worker worker --loglevel=info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://logicortex:secret@db/logicortex_dev
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

volumes:
  postgres_data: